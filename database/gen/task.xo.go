package gen

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

// Task represents a row from 'public.tasks'.
type Task struct {
	ID          uuid.UUID    `json:"id"`          // id
	UserID      uuid.UUID    `json:"user_id"`     // user_id
	Title       string       `json:"title"`       // title
	Description string       `json:"description"` // description
	Status      int          `json:"status"`      // status
	DueDate     sql.NullTime `json:"due_date"`    // due_date
	CreatedAt   sql.NullTime `json:"created_at"`  // created_at
	UpdatedAt   sql.NullTime `json:"updated_at"`  // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Task] exists in the database.
func (t *Task) Exists() bool {
	return t._exists
}

// Deleted returns true when the [Task] has been marked for deletion
// from the database.
func (t *Task) Deleted() bool {
	return t._deleted
}

// Insert inserts the [Task] to the database.
func (t *Task) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.tasks (` +
		`id, user_id, title, description, status, due_date, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`
	// run
	logf(sqlstr, t.ID, t.UserID, t.Title, t.Description, t.Status, t.DueDate, t.CreatedAt, t.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.UserID, t.Title, t.Description, t.Status, t.DueDate, t.CreatedAt, t.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a [Task] in the database.
func (t *Task) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.tasks SET ` +
		`user_id = $1, title = $2, description = $3, status = $4, due_date = $5, created_at = $6, updated_at = $7 ` +
		`WHERE id = $8`
	// run
	logf(sqlstr, t.UserID, t.Title, t.Description, t.Status, t.DueDate, t.CreatedAt, t.UpdatedAt, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.UserID, t.Title, t.Description, t.Status, t.DueDate, t.CreatedAt, t.UpdatedAt, t.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Task] to the database.
func (t *Task) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for [Task].
func (t *Task) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.tasks (` +
		`id, user_id, title, description, status, due_date, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, title = EXCLUDED.title, description = EXCLUDED.description, status = EXCLUDED.status, due_date = EXCLUDED.due_date, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, t.ID, t.UserID, t.Title, t.Description, t.Status, t.DueDate, t.CreatedAt, t.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.UserID, t.Title, t.Description, t.Status, t.DueDate, t.CreatedAt, t.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the [Task] from the database.
func (t *Task) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.tasks ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TasksByUserID retrieves a row from 'public.tasks' as a [Task].
//
// Generated from index 'idx_tasks_user_id'.
func TasksByUserID(ctx context.Context, db DB, userID uuid.UUID) ([]*Task, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, title, description, status, due_date, created_at, updated_at ` +
		`FROM public.tasks ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Task
	for rows.Next() {
		t := Task{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&t.ID, &t.UserID, &t.Title, &t.Description, &t.Status, &t.DueDate, &t.CreatedAt, &t.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &t)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// TaskByID retrieves a row from 'public.tasks' as a [Task].
//
// Generated from index 'tasks_pkey'.
func TaskByID(ctx context.Context, db DB, id uuid.UUID) (*Task, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, title, description, status, due_date, created_at, updated_at ` +
		`FROM public.tasks ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	t := Task{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&t.ID, &t.UserID, &t.Title, &t.Description, &t.Status, &t.DueDate, &t.CreatedAt, &t.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

// User returns the User associated with the [Task]'s (UserID).
//
// Generated from foreign key 'fk_tasks_user'.
func (t *Task) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, t.UserID)
}
