package gen

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

// TaskAssignee represents a row from 'public.task_assignees'.
type TaskAssignee struct {
	ID         uuid.UUID    `json:"id"`          // id
	TaskID     uuid.UUID    `json:"task_id"`     // task_id
	UserID     uuid.UUID    `json:"user_id"`     // user_id
	AssignedAt sql.NullTime `json:"assigned_at"` // assigned_at
	CreatedAt  sql.NullTime `json:"created_at"`  // created_at
	UpdatedAt  sql.NullTime `json:"updated_at"`  // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [TaskAssignee] exists in the database.
func (ta *TaskAssignee) Exists() bool {
	return ta._exists
}

// Deleted returns true when the [TaskAssignee] has been marked for deletion
// from the database.
func (ta *TaskAssignee) Deleted() bool {
	return ta._deleted
}

// Insert inserts the [TaskAssignee] to the database.
func (ta *TaskAssignee) Insert(ctx context.Context, db DB) error {
	switch {
	case ta._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ta._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.task_assignees (` +
		`id, task_id, user_id, assigned_at, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, ta.ID, ta.TaskID, ta.UserID, ta.AssignedAt, ta.CreatedAt, ta.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, ta.ID, ta.TaskID, ta.UserID, ta.AssignedAt, ta.CreatedAt, ta.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	ta._exists = true
	return nil
}

// Update updates a [TaskAssignee] in the database.
func (ta *TaskAssignee) Update(ctx context.Context, db DB) error {
	switch {
	case !ta._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ta._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.task_assignees SET ` +
		`task_id = $1, user_id = $2, assigned_at = $3, created_at = $4, updated_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, ta.TaskID, ta.UserID, ta.AssignedAt, ta.CreatedAt, ta.UpdatedAt, ta.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ta.TaskID, ta.UserID, ta.AssignedAt, ta.CreatedAt, ta.UpdatedAt, ta.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [TaskAssignee] to the database.
func (ta *TaskAssignee) Save(ctx context.Context, db DB) error {
	if ta.Exists() {
		return ta.Update(ctx, db)
	}
	return ta.Insert(ctx, db)
}

// Upsert performs an upsert for [TaskAssignee].
func (ta *TaskAssignee) Upsert(ctx context.Context, db DB) error {
	switch {
	case ta._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.task_assignees (` +
		`id, task_id, user_id, assigned_at, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`task_id = EXCLUDED.task_id, user_id = EXCLUDED.user_id, assigned_at = EXCLUDED.assigned_at, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, ta.ID, ta.TaskID, ta.UserID, ta.AssignedAt, ta.CreatedAt, ta.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, ta.ID, ta.TaskID, ta.UserID, ta.AssignedAt, ta.CreatedAt, ta.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	ta._exists = true
	return nil
}

// Delete deletes the [TaskAssignee] from the database.
func (ta *TaskAssignee) Delete(ctx context.Context, db DB) error {
	switch {
	case !ta._exists: // doesn't exist
		return nil
	case ta._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.task_assignees ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ta.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ta.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ta._deleted = true
	return nil
}

// TaskAssigneesByTaskID retrieves a row from 'public.task_assignees' as a [TaskAssignee].
//
// Generated from index 'idx_task_assignees_task_id'.
func TaskAssigneesByTaskID(ctx context.Context, db DB, taskID uuid.UUID) ([]*TaskAssignee, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, task_id, user_id, assigned_at, created_at, updated_at ` +
		`FROM public.task_assignees ` +
		`WHERE task_id = $1`
	// run
	logf(sqlstr, taskID)
	rows, err := db.QueryContext(ctx, sqlstr, taskID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*TaskAssignee
	for rows.Next() {
		ta := TaskAssignee{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ta.ID, &ta.TaskID, &ta.UserID, &ta.AssignedAt, &ta.CreatedAt, &ta.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ta)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// TaskAssigneesByUserID retrieves a row from 'public.task_assignees' as a [TaskAssignee].
//
// Generated from index 'idx_task_assignees_user_id'.
func TaskAssigneesByUserID(ctx context.Context, db DB, userID uuid.UUID) ([]*TaskAssignee, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, task_id, user_id, assigned_at, created_at, updated_at ` +
		`FROM public.task_assignees ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*TaskAssignee
	for rows.Next() {
		ta := TaskAssignee{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ta.ID, &ta.TaskID, &ta.UserID, &ta.AssignedAt, &ta.CreatedAt, &ta.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ta)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// TaskAssigneeByID retrieves a row from 'public.task_assignees' as a [TaskAssignee].
//
// Generated from index 'task_assignees_pkey'.
func TaskAssigneeByID(ctx context.Context, db DB, id uuid.UUID) (*TaskAssignee, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, task_id, user_id, assigned_at, created_at, updated_at ` +
		`FROM public.task_assignees ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ta := TaskAssignee{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ta.ID, &ta.TaskID, &ta.UserID, &ta.AssignedAt, &ta.CreatedAt, &ta.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &ta, nil
}

// Task returns the Task associated with the [TaskAssignee]'s (TaskID).
//
// Generated from foreign key 'fk_task_assignees_task'.
func (ta *TaskAssignee) Task(ctx context.Context, db DB) (*Task, error) {
	return TaskByID(ctx, db, ta.TaskID)
}

// User returns the User associated with the [TaskAssignee]'s (UserID).
//
// Generated from foreign key 'fk_task_assignees_user'.
func (ta *TaskAssignee) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, ta.UserID)
}
