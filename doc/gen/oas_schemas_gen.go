// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// AssignTaskOK is response for AssignTask operation.
type AssignTaskOK struct{}

type AssignTaskReq struct {
	UserIds []string `json:"user_ids"`
}

// GetUserIds returns the value of UserIds.
func (s *AssignTaskReq) GetUserIds() []string {
	return s.UserIds
}

// SetUserIds sets the value of UserIds.
func (s *AssignTaskReq) SetUserIds(val []string) {
	s.UserIds = val
}

// DeleteTaskNoContent is response for DeleteTask operation.
type DeleteTaskNoContent struct{}

// Ref: #/components/schemas/Error
type Error struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

type LoginOK struct {
	Jwt OptString `json:"jwt"`
}

// GetJwt returns the value of Jwt.
func (s *LoginOK) GetJwt() OptString {
	return s.Jwt
}

// SetJwt sets the value of Jwt.
func (s *LoginOK) SetJwt(val OptString) {
	s.Jwt = val
}

type LoginReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *LoginReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *LoginReq) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *LoginReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *LoginReq) SetPassword(val string) {
	s.Password = val
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUser returns new OptUser with value set to v.
func NewOptUser(v User) OptUser {
	return OptUser{
		Value: v,
		Set:   true,
	}
}

// OptUser is optional User.
type OptUser struct {
	Value User
	Set   bool
}

// IsSet returns true if OptUser was set.
func (o OptUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUser) Reset() {
	var v User
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUser) SetTo(v User) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUser) Get() (v User, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUser) Or(d User) User {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type SignUpCreated struct {
	User OptUser   `json:"user"`
	Jwt  OptString `json:"jwt"`
}

// GetUser returns the value of User.
func (s *SignUpCreated) GetUser() OptUser {
	return s.User
}

// GetJwt returns the value of Jwt.
func (s *SignUpCreated) GetJwt() OptString {
	return s.Jwt
}

// SetUser sets the value of User.
func (s *SignUpCreated) SetUser(val OptUser) {
	s.User = val
}

// SetJwt sets the value of Jwt.
func (s *SignUpCreated) SetJwt(val OptString) {
	s.Jwt = val
}

type SignUpReq struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetName returns the value of Name.
func (s *SignUpReq) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *SignUpReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *SignUpReq) GetPassword() string {
	return s.Password
}

// SetName sets the value of Name.
func (s *SignUpReq) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *SignUpReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *SignUpReq) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/Task
type Task struct {
	ID          string      `json:"id"`
	UserID      string      `json:"user_id"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	Status      int         `json:"status"`
	DueDate     OptDateTime `json:"due_date"`
}

// GetID returns the value of ID.
func (s *Task) GetID() string {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *Task) GetUserID() string {
	return s.UserID
}

// GetTitle returns the value of Title.
func (s *Task) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Task) GetDescription() string {
	return s.Description
}

// GetStatus returns the value of Status.
func (s *Task) GetStatus() int {
	return s.Status
}

// GetDueDate returns the value of DueDate.
func (s *Task) GetDueDate() OptDateTime {
	return s.DueDate
}

// SetID sets the value of ID.
func (s *Task) SetID(val string) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *Task) SetUserID(val string) {
	s.UserID = val
}

// SetTitle sets the value of Title.
func (s *Task) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Task) SetDescription(val string) {
	s.Description = val
}

// SetStatus sets the value of Status.
func (s *Task) SetStatus(val int) {
	s.Status = val
}

// SetDueDate sets the value of DueDate.
func (s *Task) SetDueDate(val OptDateTime) {
	s.DueDate = val
}

// Ref: #/components/schemas/User
type User struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

// GetID returns the value of ID.
func (s *User) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// SetID sets the value of ID.
func (s *User) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}
