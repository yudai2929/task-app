// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AssignTask implements assignTask operation.
	//
	// Assign users to a task.
	//
	// POST /v1/tasks/{id}/assign
	AssignTask(ctx context.Context, req *AssignTaskReq, params AssignTaskParams) error
	// CreateTask implements createTask operation.
	//
	// Create a task.
	//
	// POST /v1/tasks
	CreateTask(ctx context.Context, req *CreateTaskReq) (*Task, error)
	// DeleteTask implements deleteTask operation.
	//
	// Delete a task.
	//
	// DELETE /v1/tasks/{id}
	DeleteTask(ctx context.Context, params DeleteTaskParams) error
	// GetTask implements getTask operation.
	//
	// Get a task.
	//
	// GET /v1/tasks/{id}
	GetTask(ctx context.Context, params GetTaskParams) (*Task, error)
	// HealthCheck implements healthCheck operation.
	//
	// Health check.
	//
	// GET /v1/health
	HealthCheck(ctx context.Context) (*HealthCheckOK, error)
	// ListTasks implements listTasks operation.
	//
	// Get task list.
	//
	// GET /v1/tasks
	ListTasks(ctx context.Context) ([]Task, error)
	// Login implements login operation.
	//
	// User login.
	//
	// POST /v1/login
	Login(ctx context.Context, req *LoginReq) (*LoginOK, error)
	// SignUp implements signUp operation.
	//
	// User signup.
	//
	// POST /v1/signup
	SignUp(ctx context.Context, req *SignUpReq) (*SignUpCreated, error)
	// UpdateTask implements updateTask operation.
	//
	// Update a task.
	//
	// PUT /v1/tasks/{id}
	UpdateTask(ctx context.Context, req *UpdateTaskReq, params UpdateTaskParams) (*Task, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
