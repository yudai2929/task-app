// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=./usecase.go -destination=./mock/mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	usecase "github.com/yudai2929/task-app/pkg/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthUsecase) Login(ctx context.Context, in *usecase.LoginInput) (*usecase.LoginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, in)
	ret0, _ := ret[0].(*usecase.LoginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthUsecaseMockRecorder) Login(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthUsecase)(nil).Login), ctx, in)
}

// SignUp mocks base method.
func (m *MockAuthUsecase) SignUp(ctx context.Context, in *usecase.SignUpInput) (*usecase.SignUpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, in)
	ret0, _ := ret[0].(*usecase.SignUpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthUsecaseMockRecorder) SignUp(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthUsecase)(nil).SignUp), ctx, in)
}

// MockTaskUsecase is a mock of TaskUsecase interface.
type MockTaskUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTaskUsecaseMockRecorder
}

// MockTaskUsecaseMockRecorder is the mock recorder for MockTaskUsecase.
type MockTaskUsecaseMockRecorder struct {
	mock *MockTaskUsecase
}

// NewMockTaskUsecase creates a new mock instance.
func NewMockTaskUsecase(ctrl *gomock.Controller) *MockTaskUsecase {
	mock := &MockTaskUsecase{ctrl: ctrl}
	mock.recorder = &MockTaskUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskUsecase) EXPECT() *MockTaskUsecaseMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskUsecase) CreateTask(ctx context.Context, in *usecase.CreateTaskInput) (*usecase.CreateTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, in)
	ret0, _ := ret[0].(*usecase.CreateTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskUsecaseMockRecorder) CreateTask(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskUsecase)(nil).CreateTask), ctx, in)
}

// GetTask mocks base method.
func (m *MockTaskUsecase) GetTask(ctx context.Context, in *usecase.GetTaskInput) (*usecase.GetTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, in)
	ret0, _ := ret[0].(*usecase.GetTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskUsecaseMockRecorder) GetTask(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTaskUsecase)(nil).GetTask), ctx, in)
}

// ListTasks mocks base method.
func (m *MockTaskUsecase) ListTasks(ctx context.Context, in *usecase.ListTasksInput) (*usecase.ListTasksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", ctx, in)
	ret0, _ := ret[0].(*usecase.ListTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockTaskUsecaseMockRecorder) ListTasks(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockTaskUsecase)(nil).ListTasks), ctx, in)
}
